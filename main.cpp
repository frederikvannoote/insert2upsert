#include <QCoreApplication>
#include <QCommandLineParser>
#include <QDebug>
#include <QFile>
#include <QTextStream>


int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    QCommandLineParser cmd;
    cmd.setApplicationDescription("Convert INSERT statements generated by pg_dump into INSERT ON COMFLICT (upsert)");
    cmd.addHelpOption();

    QCommandLineOption inputOption("input", "Input file (generated by pg_dump)", "input");
    QCommandLineOption conflictOption("conflict", "Column where conflict could occur", "conflict");
    QCommandLineOption excludeOption("exclude", "Exclude these columns from result", "exclude");

    cmd.addOptions( { inputOption, conflictOption, excludeOption
                    } );
    cmd.process(a.arguments());

    QFile input(cmd.value(inputOption));
    if (!input.open(QFile::ReadOnly | QFile::Text))
    {
        qCritical() << "Could not read" << input.fileName();
        return 1;
    }

    QTextStream in(&input);
    QString line;
    while (in.readLineInto(&line))
    {


        if (line.startsWith("INSERT INTO"))
        {
            // Analyse line
            QStringList words = line.split(' ');
            words.takeFirst(); // remove INSERT INTO
            words.takeFirst(); // remove INSERT INTO
            const QString tableName = words.takeFirst();

            // Extract column names
            int valueIndex = words.indexOf("VALUES"); // Position of VALUES
            QStringList columns = words.mid(0, valueIndex);
            QString temp = columns.join(' ').mid(1);
            temp.chop(1); // Remove embodying ( )
            columns = temp.split(',');
            for (auto &str: columns)
                str = str.trimmed();

            // Extract values
            QStringList values = words.mid(valueIndex+1);
            temp = values.join(' ').mid(1);
            temp.chop(1); // Remove embodying ( )
            values = temp.split(',');
            for (auto &str: values)
                str = str.trimmed();

            foreach (const QString &exclude, cmd.values(excludeOption))
            {
                const int index = columns.indexOf(exclude);
                columns.removeAt(index);
                values.removeAt(index);
            }

            QStringList conflictActions = columns;
            conflictActions.removeAll(cmd.value(conflictOption));
            QStringList conflictResolutions;
            foreach (const QString &conflictAction, conflictActions)
            {
                conflictResolutions << conflictAction + "=EXCLUDED." + conflictAction;
            }

            qDebug().noquote() << "INSERT INTO" << tableName <<
                 "(" << columns.join(", ") << ") VALUES (" << values.join(", ") <<
                 "ON CONFLICT (" << cmd.value(conflictOption) << ") DO UPDATE SET" << conflictResolutions.join(", ") << ";";
        }
        else
        {
            qDebug().noquote() << line;
        }
    }
    input.close();

    return 0;
}
